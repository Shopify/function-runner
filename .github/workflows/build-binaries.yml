name: Build Binaries

on:
  workflow_call:
    inputs:
      tag_name:
        description: "Tag name for release builds"
        required: false
        type: string
      is_release:
        description: "Whether this is a release build"
        required: true
        type: boolean
        default: false
    outputs:
      linux_x86_64:
        description: "Linux x86_64 binary path"
        value: ${{ jobs.build.outputs.linux_x86_64 }}
      linux_arm64:
        description: "Linux ARM64 binary path"
        value: ${{ jobs.build.outputs.linux_arm64 }}
      macos_x86_64:
        description: "macOS x86_64 binary path"
        value: ${{ jobs.build.outputs.macos_x86_64 }}
      macos_arm64:
        description: "macOS ARM64 binary path"
        value: ${{ jobs.build.outputs.macos_arm64 }}
      windows_x86_64:
        description: "Windows x86_64 binary path"
        value: ${{ jobs.build.outputs.windows_x86_64 }}

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    outputs:
      linux_x86_64: ${{ steps.build.outputs.linux_x86_64 }}
      linux_arm64: ${{ steps.build.outputs.linux_arm64 }}
      macos_x86_64: ${{ steps.build.outputs.macos_x86_64 }}
      macos_arm64: ${{ steps.build.outputs.macos_arm64 }}
      windows_x86_64: ${{ steps.build.outputs.windows_x86_64 }}
    strategy:
      matrix:
        include:
          - name: linux
            os: ubuntu-22.04 # Use oldest supported non-deprecated version so we link against older glibc version which allows running binary on a wider set of Linux systems
            path: target/x86_64-unknown-linux-gnu/release/function-runner
            asset_name: function-runner-x86_64-linux-${{ inputs.is_release && (inputs.tag_name || github.event.release.tag_name) || 'test' }}
            shasum_cmd: sha256sum
            target: x86_64-unknown-linux-gnu
            output_var: linux_x86_64
          - name: linux-arm64
            os: ubuntu-22.04 # Use oldest supported non-deprecated version so we link against older glibc version which allows running binary on a wider set of Linux systems
            path: target/aarch64-unknown-linux-gnu/release/function-runner
            asset_name: function-runner-arm-linux-${{ inputs.is_release && (inputs.tag_name || github.event.release.tag_name) || 'test' }}
            shasum_cmd: sha256sum
            target: aarch64-unknown-linux-gnu
            output_var: linux_arm64
          - name: macos
            os: macos-latest
            path: target/x86_64-apple-darwin/release/function-runner
            asset_name: function-runner-x86_64-macos-${{ inputs.is_release && (inputs.tag_name || github.event.release.tag_name) || 'test' }}
            shasum_cmd: shasum -a 256
            target: x86_64-apple-darwin
            output_var: macos_x86_64
          - name: arm64-macos
            os: macos-latest
            path: target/aarch64-apple-darwin/release/function-runner
            asset_name: function-runner-arm-macos-${{ inputs.is_release && (inputs.tag_name || github.event.release.tag_name) || 'test' }}
            shasum_cmd: shasum -a 256
            target: aarch64-apple-darwin
            output_var: macos_arm64
          - name: windows
            os: windows-latest
            path: target\x86_64-pc-windows-msvc\release\function-runner.exe
            asset_name: function-runner-x86_64-windows-${{ inputs.is_release && (inputs.tag_name || github.event.release.tag_name) || 'test' }}
            shasum_cmd: sha256sum
            target: x86_64-pc-windows-msvc
            output_var: windows_x86_64

    steps:
      - uses: actions/checkout@v4

      - name: Install cross compiler
        if: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Set up cross compiler env variables
        if: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}
        run: |
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV

      # Should no-op except for macos-arm case where that target won't be installed
      - name: Install target
        run: rustup target add ${{ matrix.target }}

      - name: Build ${{ matrix.target }}
        id: build
        run: |
          cargo build --release --target ${{ matrix.target }} --package function-runner
          echo "${{ matrix.output_var }}=${{ matrix.path }}" >> $GITHUB_OUTPUT 